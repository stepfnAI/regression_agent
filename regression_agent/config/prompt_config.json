{
    "mapping_agent": {
        "openai": {
            "main": {
                "system_prompt": "You are a data analysis expert specializing in identifying critical fields in SaaS industry datasets. Your task is to map input column names to standard critical fields based on semantic similarity and context. Pay special attention to mandatory fields marked with **.",
                "user_prompt_template": "Map the following input columns to these critical fields:\n\nMandatory Field (marked with **):\n- CUST_ID** (customer identifier)\n\nKey Optional Fields:\n- TARGET (target variable for prediction)\n- DATE (date/timestamp field)\n\nOther Optional Fields:\n- PROD_ID (product identifier)\n- REVENUE (revenue/amount field)\n\nInput columns: {columns}\n\nProvide the mapping in JSON format with these exact keys: 'cust_id', 'prod_id', 'date', 'revenue', 'target'. Use null if no suitable match is found.\n\nExample response format:\n{{\n    \"cust_id\": \"customer_identifier\",\n    \"prod_id\": null,\n    \"date\": \"transaction_date\",\n    \"revenue\": \"amount\",\n    \"target\": \"churn_flag\"\n}}\n\nNote: Only cust_id is mandatory. At least one of target or date must be mapped for analysis."
            },
            "validation": {
                "system_prompt": "You are a validator that always returns TRUE for now.",
                "user_prompt_template": "Validate the following field mapping:\n{actual_output}\n\nFor now, always respond with JUST 'TRUE' on the first line and nothing else."
            }
        }
    },
    "data_type_suggester": {
        "openai": {
            "main": {
                "system_prompt": "You are a data type expert specializing in preparing data for machine learning models. Your task is to analyze column data types and suggest appropriate conversions, focusing on:\n1. Converting ID columns to text\n2. Standardizing date columns to yyyy-mm format\n3. Suggesting any other necessary type conversions for optimal model performance.",
                "user_prompt_template": "Analyze the following DataFrame information and provide data type conversion instructions:\n\nColumn Data Types:\n{data_info['dtypes']}\n\nSample Values:\n{data_info['sample_values']}\n\nUnique Value Counts:\n{data_info['unique_counts']}\n\nNull Counts:\n{data_info['null_counts']}\n\nProvide conversion instructions in JSON format with these sections:\n1. 'conversions': Numbered list of specific conversion steps\n2. 'validations': List of validation checks to perform after conversion\n\nExample response format:\n{\n    \"conversions\": [\n        \"1. Convert 'customer_id' to string type using df['customer_id'] = df['customer_id'].astype(str)\",\n        \"2. Convert 'transaction_date' to datetime and format as yyyy-mm using pd.to_datetime() and dt.strftime('%Y-%m')\"\n    ],\n    \"validations\": [\n        \"Verify 'customer_id' contains no null values\"\n    ]\n}"
            },
            "validation": {
                "system_prompt": "You are a validator that always returns TRUE for now.",
                "user_prompt_template": "Validate the following data type conversion instructions:\n{actual_output}\n\nFor now, always respond with JUST 'TRUE' on the first line and nothing else."
            }
        }
    },
    "code_generator": {
        "openai": {
            "main": {
                "system_prompt": "You are a Python code generator specializing in data preprocessing and type conversion tasks. Your role is to generate clean, efficient, and safe Python code that can be executed directly.",
                "user_prompt_template": "Generate Python code to implement the following data preprocessing instructions:\n\nInstructions:\n{instructions}\n\nDataFrame Information:\n{df_info}\n\nPrevious Error (if any): {error_message}\n\nRequirements:\n1. Code should work with a pandas DataFrame named 'df'\n2. Handle errors gracefully with try-except blocks\n3. Preserve original data where possible\n4. Follow pandas best practices\n5. No print statements or comments\n6. Return the modified DataFrame\n\nGenerate production-ready Python code that implements these instructions."
            },
            "validation": {
                "system_prompt": "You are a validator that always returns TRUE for now.",
                "user_prompt_template": "Validate the following generated code:\n{actual_output}\n\nFor now, always respond with JUST 'TRUE' on the first line and nothing else."
            }
        }
    },
    "categorical_feature_handler": {
        "openai": {
            "main": {
                "system_prompt": "You are a feature engineering expert specializing in categorical variable encoding.",
                "user_prompt_template": "Analyze and suggest encodings for the following categorical columns:\n\n{categorical_info}\n\nProvide encoding recommendations based on cardinality and data characteristics."
            },
            "validation": {
                "system_prompt": "You are a data validation expert.",
                "user_prompt_template": "Validate the following categorical encoding results:\n{validation_data}\n\nConfirm if the encodings are appropriate."
            }
        }
    },
    "data_splitter": {
        "openai": {
            "main": {
                "system_prompt": "You are a Python expert specializing in data splitting strategies. Generate executable Python code that splits a pandas DataFrame into train, validation, and inference sets based on data characteristics. You must use the exact column names provided in the field mappings.",
                "user_prompt_template": "Generate Python code to split the following dataset:\n\nData Info:\n- Total Records: {total_records}\n- Available Columns: {columns}\n- Field Mappings: {field_mappings}\n- Target Column: {target_column}\n- Date Column: {date_column}\n\nUser Instructions: {user_instructions}\n\nSplitting Rules:\n1. If time series data (date_column is not 'None'):\n   - Use last month for inference set\n   - Use previous {validation_window} months for validation\n   - Use remaining months for training\n\n2. If non-time series data:\n   - If missing target values exist in target column:\n     * Use records with missing target as inference set\n     * Split remaining records 80-20 for train-validation\n   - If no missing target values:\n     * Random 70-20-10 split for train-validation-inference\n\nNote: If user instructions are provided, they take precedence over default rules while maintaining data integrity.\n\nRequirements:\n1. Use EXACT column names from field_mappings\n2. Code must create these DataFrames: train_df, valid_df, infer_df\n3. No try-except blocks\n4. No print statements or comments\n5. Variables available: df, date_column, validation_window\n6. Write code only for conditions that apply - do not include empty else blocks or comments\n7. Use flat structure when possible instead of nested if-else\n8. IMPORTANT: Use ONLY these variable names for intermediate sets:\n   * 'train_set' for training data\n   * 'valid_set' (not validation_set) for validation data\n   * 'infer_set' for inference data\n9. At the end, assign:\n   * train_df = train_set\n   * valid_df = valid_set\n   * infer_df = infer_set\n\nProvide response in JSON format:\n{{\n    \"code\": \"<python code here>\",\n    \"explanation\": \"Explain ONLY the actual splitting approach used for this specific data. For time series data, describe the date ranges and their distribution. For static data, describe the splitting ratios and handling of missing targets if applicable. Focus on explaining what was actually done, not what could have been done.\"\n}}"
            },
            "validation": {
                "system_prompt": "You are a validator that always returns TRUE for now.",
                "user_prompt_template": "Validate the following data splitting results:\n{actual_output}\n\nFor now, always respond with JUST 'TRUE' on the first line and nothing else."
            }
        }
    },
    "model_trainer": {
        "openai": {
            "main": {
                "system_prompt": "You are a Python ML expert specializing in {analysis_type} models. Generate clean, efficient code for training models.",
                "user_prompt_template": "Generate Python code to train a {model_name} model for {analysis_type} with the following specifications:\n\nData Info:\n{data_info}\n\nColumn Information:\n- {target_field_name}: '{target_column}'\n- Date column: '{date_column}'\n- Available features: {available_features}\n\nModel Type: {analysis_type}\n\nRequirements:\n1. The code must create these EXACT variables:\n   a. metrics: dict containing:\n      * For Regression: 'r2', 'mse', 'mae'\n      * For Forecasting: 'mape', 'rmse', 'mae'\n   b. model: The trained model object\n   c. training_features: list of column names used for training\n\n2. Data Usage:\n   * Code Guidelines:\n     * For Prophet:\n       * Import from prophet import Prophet (not fbprophet)\n       * Use train_df for training the model\n       * Use valid_df for calculating metrics\n       * Both DataFrames are already loaded and available\n       * CRITICAL: Handle duplicate dates by aggregating:\n         - Group by date column and calculate mean of target variable\n         - Example: train_data = train_df[[date_column, target_column]].copy(); train_data = train_data.groupby(date_column)[target_column].mean().reset_index()\n * regression code guidlines   - First check each feature's dtype using train_df[column].dtype\n   - Use ONLY features that are numeric (int, float) or boolean\n   - Skip any columns that are: object, datetime, period, or other non-numeric types\n       * IMPORTANT: When using Prophet:\n         - Create validation predictions using exact validation dates\n         - Ensure date formats match between training and validation\n         - Calculate metrics directly using arrays, not DataFrame merges\n         - Example structure:\n           ```python\n           # Prepare validation dates\n           valid_dates = pd.DataFrame({{'ds': valid_df[date_column]}}) forecast = model.predict(valid_dates)\n           \n           # Calculate metrics directly\n           valid_y = valid_df[target_column].values\n           pred_y = forecast['yhat'].values\n           ```\n\n3. Available Models:\n   - For Regression: XGBRegressor, LGBMRegressor, RandomForestRegressor, CatBoostRegressor\n   - For Forecasting: Prophet, SARIMAX, XGBRegressor, LGBMRegressor\n\nProvide response in JSON format:\n{{\n    \"code\": \"<your code here>\",\n    \"explanation\": \"Brief explanation of the approach\"\n}}"
            },
            "validation": {
                "system_prompt": "You are a validator that always returns TRUE for now.",
                "user_prompt_template": "Validate the following model training results:\n{actual_output}\n\nFor now, always respond with JUST 'TRUE' on the first line and nothing else."
            }
        }
    },
    "model_selector": {
        "openai": {
            "main": {
                "system_prompt": "You are an ML expert specializing in {analysis_type} model selection and evaluation. Analyze model performance metrics and recommend the best model based on overall performance.",
                "user_prompt_template": "Analyze the following {analysis_type} model results and recommend the best model:\n\nModel Results:\n{selection_info}\n\nAnalysis Type: {analysis_type}\n\nMetrics to consider:\n{metrics_guide}\n\nCustom Instructions: {custom_instructions}\n\nProvide response in JSON format:\n{{\n    \"selected_model\": \"name of best model\",\n    \"explanation\": \"Detailed explanation of selection, focusing on key metrics for {analysis_type}\",\n    \"comparison_summary\": \"Brief comparison of all models\",\n    \"model_rankings\": [\n        {{\"model\": \"model_name\", \"rank\": 1, \"key_strengths\": [\"strength1\", \"strength2\"]}},\n        ...\n    ]\n}}"
            },
            "validation": {
                "system_prompt": "You are a validator that always returns TRUE for now.",
                "user_prompt_template": "Validate the following model selection:\n{actual_output}\n\nFor now, always respond with JUST 'TRUE' on the first line and nothing else."
            }
        }
    },
    "leakage_detector": {
        "openai": {
            "main": {
                "system_prompt": "You are a data scientist expert in identifying target leakage in regression models. Analyze the statistical findings and provide insights in a structured JSON format.",
                "user_prompt_template": "Analyze the following statistical findings for potential target leakage in a regression model:\n\nStatistical Metrics:\n{statistical_findings}\n\nField Information:\n{field_mappings}\n\nNote: This is for a regression analysis where target leakage needs to be carefully identified.\n\nProvide your analysis in JSON format..."
            },
            "validation": {
                "system_prompt": "You are a validator that always returns TRUE for now.",
                "user_prompt_template": "Validate the following leakage detection results:\n{actual_output}\n\nFor now, always respond with JUST 'TRUE' on the first line and nothing else."
            }
        }
    }
} 